# creating Puppet classes and rules
# Puppet interaction with different OSs
# using the DSL to create complex rules


Install packages
There's a module named packages on the Puppet VM instance that takes care of installing the packages 
that are needed on the machines in the fleet. Use the command to visit the module:


cd /etc/puppet/code/environments/production/modules/packages

This module already has a resource entry specifying that python-requests is installed on all machines. 
You can see the init.pp file using the cat command on the Puppet VM instance.

cat manifests/init.pp
output -->
class packages {

    package { 'python-requests':
        ensure => installed,
    }


}

Now, add an additional resource in the same init.pp file within 
the path /etc/puppet/code/environments/production/modules/packages, ensuring the golang package gets installed on 
all machines that belong to the Debian family of 
operating systems (which includes Debian, Ubuntu, LinuxMint, and a bunch of others).

This resource will be very similar to the previous python-requests one. 
Add edit permission to the file before moving forward using:

sudo chmod 646 manifests/init.pp


class packages {
   package { 'python-requests':
       ensure => installed,
   }
   if $facts[os][family] == "Debian" {
     package { 'golang':
       ensure => installed,
     }
  }
   if $facts[os][family] == "RedHat" {
     package { 'nodejs':
       ensure => installed,
     }
  }
}




class machine_info {

    if $facts[kernel]== "windows" {
        $info_path = "C:\Windows\Temp\Machine_Info.txt"
    }
    else {
        $info_path = "/tmp/machine_info.txt"
    }
   file { 'machine_info':
        path => $info_path,
        content => template('machine_info/info.erb'),
    }

}




